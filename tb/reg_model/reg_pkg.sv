
// ** Note: This code was auto-generated by a python file

//----------------------------------------------------------------------
// rgu_reg_pkg
//----------------------------------------------------------------------
package rgu_reg_pkg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

    

  //--------------------------------------------------------------------
  // Class: RGU_GLB_reg
  // Description: System-wide reset control register
  // 
  //--------------------------------------------------------------------

  class RGU_GLB_reg extends uvm_reg;
    `uvm_object_utils(RGU_GLB_reg)

    rand uvm_reg_field SW0_RESET; // System reset (including RGU)
    rand uvm_reg_field SW1_RESET; // System reset (excluding RGU)
    rand uvm_reg_field SYS_WDT_EN; // Enable reset from main system's WDTs


    // Function: new
    // 
    function new(string name = "RGU_GLB_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      SW0_RESET = uvm_reg_field::type_id::create("SW0_RESET");
      SW1_RESET = uvm_reg_field::type_id::create("SW1_RESET");
      SYS_WDT_EN = uvm_reg_field::type_id::create("SYS_WDT_EN");

      SW0_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SW1_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 1 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SYS_WDT_EN.configure(
        .parent                 ( this ),
        .size                   ( 4 ),
        .lsb_pos                ( 2 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_GLB_reg







  //--------------------------------------------------------------------
  // Class: RGU_RST_STATUS_reg
  // Description: Reset cause register
  // 
  //--------------------------------------------------------------------

  class RGU_RST_STATUS_reg extends uvm_reg;
    `uvm_object_utils(RGU_RST_STATUS_reg)

    rand uvm_reg_field PWRGD; // Reset was initiated by the sys_pwrgd signal
    rand uvm_reg_field SYS_RESET; // Reset was initiated by the sys_reset_n signal
    rand uvm_reg_field SB_WDT_RESET; // Reset was initiated by the SB (SCU) WDT
    rand uvm_reg_field SYS_WDT_RESET; // Reset was initiated by the main system's system WDT
    rand uvm_reg_field SW0_RESET; // Reset was initiated by the system-wide software reset
    rand uvm_reg_field SW1_RESET; // Reset was initiated by the system-wide software reset


    // Function: new
    // 
    function new(string name = "RGU_RST_STATUS_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      PWRGD = uvm_reg_field::type_id::create("PWRGD");
      SYS_RESET = uvm_reg_field::type_id::create("SYS_RESET");
      SB_WDT_RESET = uvm_reg_field::type_id::create("SB_WDT_RESET");
      SYS_WDT_RESET = uvm_reg_field::type_id::create("SYS_WDT_RESET");
      SW0_RESET = uvm_reg_field::type_id::create("SW0_RESET");
      SW1_RESET = uvm_reg_field::type_id::create("SW1_RESET");

      PWRGD.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RO" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SYS_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 1 ),
        .access                 ( "RO" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SB_WDT_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 2 ),
        .access                 ( "RO" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SYS_WDT_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 3 ),
        .access                 ( "RO" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SW0_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 4 ),
        .access                 ( "RO" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SW1_RESET.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 5 ),
        .access                 ( "RO" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_RST_STATUS_reg







  //--------------------------------------------------------------------
  // Class: RGU_TIMER0_reg
  // Description: Stage0 timer register
  // 
  //--------------------------------------------------------------------

  class RGU_TIMER0_reg extends uvm_reg;
    `uvm_object_utils(RGU_TIMER0_reg)

    rand uvm_reg_field TIM0_VAL; // Stage0 timer value


    // Function: new
    // 
    function new(string name = "RGU_TIMER0_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      TIM0_VAL = uvm_reg_field::type_id::create("TIM0_VAL");

      TIM0_VAL.configure(
        .parent                 ( this ),
        .size                   ( 32 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h400 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_TIMER0_reg







  //--------------------------------------------------------------------
  // Class: RGU_TIMER1_reg
  // Description: Stage1 timer register
  // 
  //--------------------------------------------------------------------

  class RGU_TIMER1_reg extends uvm_reg;
    `uvm_object_utils(RGU_TIMER1_reg)

    rand uvm_reg_field TIM1_VAL; // Stage1 timer value


    // Function: new
    // 
    function new(string name = "RGU_TIMER1_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      TIM1_VAL = uvm_reg_field::type_id::create("TIM1_VAL");

      TIM1_VAL.configure(
        .parent                 ( this ),
        .size                   ( 32 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h400 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_TIMER1_reg







  //--------------------------------------------------------------------
  // Class: RGU_SB_SWRST_reg
  // Description: SCU software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_SB_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_SB_SWRST_reg)

    rand uvm_reg_field DMAC_SWRST; // SB (SCU) DMAC software reset
    rand uvm_reg_field QSPI_SWRST; // SB (SCU) QSPI software reset
    rand uvm_reg_field I2C_SWRST; // SB (SCU) I2C software reset
    rand uvm_reg_field UART_SWRST; // SB (SCU) UART software reset
    rand uvm_reg_field GPIO_SWRST; // SB (SCU) GPIO software reset
    rand uvm_reg_field SRAM_SWRST; // SB (SCU) SRAM software reset


    // Function: new
    // 
    function new(string name = "RGU_SB_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      DMAC_SWRST = uvm_reg_field::type_id::create("DMAC_SWRST");
      QSPI_SWRST = uvm_reg_field::type_id::create("QSPI_SWRST");
      I2C_SWRST = uvm_reg_field::type_id::create("I2C_SWRST");
      UART_SWRST = uvm_reg_field::type_id::create("UART_SWRST");
      GPIO_SWRST = uvm_reg_field::type_id::create("GPIO_SWRST");
      SRAM_SWRST = uvm_reg_field::type_id::create("SRAM_SWRST");

      DMAC_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      QSPI_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 1 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      I2C_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 2 ),
        .lsb_pos                ( 2 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      UART_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 4 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      GPIO_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 5 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));

      SRAM_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 6 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h0 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_SB_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_SYS_SWRST_reg
  // Description: Main system software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_SYS_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_SYS_SWRST_reg)

    rand uvm_reg_field SYS_SWRST; // Main system software reset


    // Function: new
    // 
    function new(string name = "RGU_SYS_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      SYS_SWRST = uvm_reg_field::type_id::create("SYS_SWRST");

      SYS_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_SYS_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_SRAM_SWRST_reg
  // Description: Main system SRAM software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_SRAM_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_SRAM_SWRST_reg)

    rand uvm_reg_field SRAM_SWRST; // Main system SRAM software reset


    // Function: new
    // 
    function new(string name = "RGU_SRAM_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      SRAM_SWRST = uvm_reg_field::type_id::create("SRAM_SWRST");

      SRAM_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_SRAM_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_DDR_SWRST_reg
  // Description: Main system DDR software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_DDR_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_DDR_SWRST_reg)

    rand uvm_reg_field DDR_SWRST; // Main system DDR software reset


    // Function: new
    // 
    function new(string name = "RGU_DDR_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      DDR_SWRST = uvm_reg_field::type_id::create("DDR_SWRST");

      DDR_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_DDR_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_USB_SWRST_reg
  // Description: Main system USB software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_USB_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_USB_SWRST_reg)

    rand uvm_reg_field USB_SWRST; // Main system USB software reset


    // Function: new
    // 
    function new(string name = "RGU_USB_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      USB_SWRST = uvm_reg_field::type_id::create("USB_SWRST");

      USB_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 4 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'hf ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_USB_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_MMC_SWRST_reg
  // Description: Main system *MMC software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_MMC_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_MMC_SWRST_reg)

    rand uvm_reg_field MMC_SWRST; // Main system *MMC software reset


    // Function: new
    // 
    function new(string name = "RGU_MMC_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      MMC_SWRST = uvm_reg_field::type_id::create("MMC_SWRST");

      MMC_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 4 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'hf ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_MMC_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_DMAC_SWRST_reg
  // Description: Main system SDMAC software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_DMAC_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_DMAC_SWRST_reg)

    rand uvm_reg_field DMAC_SWRST; // Main system SDMAC software reset


    // Function: new
    // 
    function new(string name = "RGU_DMAC_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      DMAC_SWRST = uvm_reg_field::type_id::create("DMAC_SWRST");

      DMAC_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_DMAC_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_QSPI_SWRST_reg
  // Description: Main system QSPI software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_QSPI_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_QSPI_SWRST_reg)

    rand uvm_reg_field QSPI_SWRST; // Main system QSPI software reset


    // Function: new
    // 
    function new(string name = "RGU_QSPI_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      QSPI_SWRST = uvm_reg_field::type_id::create("QSPI_SWRST");

      QSPI_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 2 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h3 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_QSPI_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_SPI_SWRST_reg
  // Description: Main system SPI software reset
  // 
  //--------------------------------------------------------------------

  class RGU_SPI_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_SPI_SWRST_reg)

    rand uvm_reg_field SPI_SWRST; // Main system SPI software reset


    // Function: new
    // 
    function new(string name = "RGU_SPI_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      SPI_SWRST = uvm_reg_field::type_id::create("SPI_SWRST");

      SPI_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 6 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h3f ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_SPI_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_I2C_SWRST_reg
  // Description: Main system I2C software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_I2C_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_I2C_SWRST_reg)

    rand uvm_reg_field I2C_SWRST; // Main system I2C software reset


    // Function: new
    // 
    function new(string name = "RGU_I2C_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      I2C_SWRST = uvm_reg_field::type_id::create("I2C_SWRST");

      I2C_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 7 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h7f ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_I2C_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_UART_SWRST_reg
  // Description: Main system UART software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_UART_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_UART_SWRST_reg)

    rand uvm_reg_field UART_SWRST; // Main system UART software reset


    // Function: new
    // 
    function new(string name = "RGU_UART_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      UART_SWRST = uvm_reg_field::type_id::create("UART_SWRST");

      UART_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 5 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1f ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_UART_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_GPIO_SWRST_reg
  // Description: Main system GPIO software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_GPIO_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_GPIO_SWRST_reg)

    rand uvm_reg_field GPIO_SWRST; // Main system GPIO software reset


    // Function: new
    // 
    function new(string name = "RGU_GPIO_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      GPIO_SWRST = uvm_reg_field::type_id::create("GPIO_SWRST");

      GPIO_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 2 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h3 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_GPIO_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_I2S_SWRST_reg
  // Description: Main system I2S software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_I2S_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_I2S_SWRST_reg)

    rand uvm_reg_field I2S_SWRST; // Main system TDM I2S software reset


    // Function: new
    // 
    function new(string name = "RGU_I2S_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      I2S_SWRST = uvm_reg_field::type_id::create("I2S_SWRST");

      I2S_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 2 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h3 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_I2S_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_GPU_SWRST_reg
  // Description: Main system GPU software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_GPU_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_GPU_SWRST_reg)

    rand uvm_reg_field GPU_SWRST; // Main system GPU software reset


    // Function: new
    // 
    function new(string name = "RGU_GPU_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      GPU_SWRST = uvm_reg_field::type_id::create("GPU_SWRST");

      GPU_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_GPU_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_VIDEC_SWRST_reg
  // Description: Main system VIDEC software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_VIDEC_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_VIDEC_SWRST_reg)

    rand uvm_reg_field VIDEC_SWRST; // Main system VIDEC software reset


    // Function: new
    // 
    function new(string name = "RGU_VIDEC_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      VIDEC_SWRST = uvm_reg_field::type_id::create("VIDEC_SWRST");

      VIDEC_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_VIDEC_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_VICOD_SWRST_reg
  // Description: Main system VICOD software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_VICOD_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_VICOD_SWRST_reg)

    rand uvm_reg_field VICOD_SWRST; // Main system VICOD software reset


    // Function: new
    // 
    function new(string name = "RGU_VICOD_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      VICOD_SWRST = uvm_reg_field::type_id::create("VICOD_SWRST");

      VICOD_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_VICOD_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_CAMERA_SWRST_reg
  // Description: Main system CAMERA software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_CAMERA_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_CAMERA_SWRST_reg)

    rand uvm_reg_field CAMERA_SWRST; // Main system CAMERA software reset


    // Function: new
    // 
    function new(string name = "RGU_CAMERA_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      CAMERA_SWRST = uvm_reg_field::type_id::create("CAMERA_SWRST");

      CAMERA_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_CAMERA_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_DISPLAY_SWRST_reg
  // Description: Main system DISPLAY software reset
  // 
  //--------------------------------------------------------------------

  class RGU_DISPLAY_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_DISPLAY_SWRST_reg)

    rand uvm_reg_field DISPLAY_SWRST; // Main system DISPLAY software reset


    // Function: new
    // 
    function new(string name = "RGU_DISPLAY_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      DISPLAY_SWRST = uvm_reg_field::type_id::create("DISPLAY_SWRST");

      DISPLAY_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 2 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h3 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_DISPLAY_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_LLC_SWRST_reg
  // Description: Main system CPU cluster LLC software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_LLC_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_LLC_SWRST_reg)

    rand uvm_reg_field LLC_SWRST; // Main system CPU cluster LLC software reset


    // Function: new
    // 
    function new(string name = "RGU_LLC_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      LLC_SWRST = uvm_reg_field::type_id::create("LLC_SWRST");

      LLC_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_LLC_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_CPU_SWRST_reg
  // Description: Main system CPU cluster software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_CPU_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_CPU_SWRST_reg)

    rand uvm_reg_field CPU_SWRST; // Main system CPU cluster software reset


    // Function: new
    // 
    function new(string name = "RGU_CPU_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      CPU_SWRST = uvm_reg_field::type_id::create("CPU_SWRST");

      CPU_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 8 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'hff ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_CPU_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_PWM_SWRST_reg
  // Description: Main system PWM software reset register
  // 
  //--------------------------------------------------------------------

  class RGU_PWM_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_PWM_SWRST_reg)

    rand uvm_reg_field PWM_SWRST; // Main system PWM software reset


    // Function: new
    // 
    function new(string name = "RGU_PWM_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      PWM_SWRST = uvm_reg_field::type_id::create("PWM_SWRST");

      PWM_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 2 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h7 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_PWM_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_CPU_PWRUP_SWRST_reg
  // Description: Main system CPU Power-up reset register
  // 
  //--------------------------------------------------------------------

  class RGU_CPU_PWRUP_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_CPU_PWRUP_SWRST_reg)

    rand uvm_reg_field CPU_PWRUP_SWRST; // Main system CPU Power-up reset (cluster-wide)


    // Function: new
    // 
    function new(string name = "RGU_CPU_PWRUP_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      CPU_PWRUP_SWRST = uvm_reg_field::type_id::create("CPU_PWRUP_SWRST");

      CPU_PWRUP_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_CPU_PWRUP_SWRST_reg







  //--------------------------------------------------------------------
  // Class: RGU_CPU_PWRUP_HEAVY_SWRST_reg
  // Description: Main system CPU Power-up reset register
  // 
  //--------------------------------------------------------------------

  class RGU_CPU_PWRUP_HEAVY_SWRST_reg extends uvm_reg;
    `uvm_object_utils(RGU_CPU_PWRUP_HEAVY_SWRST_reg)

    rand uvm_reg_field CPU_PWRUP_HEAVY_SWRST; // Main system CPU Power-up reset (Heavy cores)


    // Function: new
    // 
    function new(string name = "RGU_CPU_PWRUP_HEAVY_SWRST_reg");
      super.new(name, 32, UVM_NO_COVERAGE);
    endfunction


    // Function: build
    // 
    virtual function void build();

      CPU_PWRUP_HEAVY_SWRST = uvm_reg_field::type_id::create("CPU_PWRUP_HEAVY_SWRST");

      CPU_PWRUP_HEAVY_SWRST.configure(
        .parent                 ( this ),
        .size                   ( 1 ),
        .lsb_pos                ( 0 ),
        .access                 ( "RW" ),
        .volatile               ( 0 ),
        .reset                  ( 'h1 ),
        .has_reset              ( 1 ),
        .is_rand                ( 1 ),
        .individually_accessible( 1 ));


    endfunction
  endclass: RGU_CPU_PWRUP_HEAVY_SWRST_reg







  //--------------------------------------------------------------------
  // Class: rgu_reg_block
  // 
  //--------------------------------------------------------------------
  class rgu_reg_block extends uvm_reg_block;
    `uvm_object_utils(rgu_reg_block)

    rand RGU_GLB_reg RGU_GLB;
    rand RGU_RST_STATUS_reg RGU_RST_STATUS;
    rand RGU_TIMER0_reg RGU_TIMER0;
    rand RGU_TIMER1_reg RGU_TIMER1;
    rand RGU_SB_SWRST_reg RGU_SB_SWRST;
    rand RGU_SYS_SWRST_reg RGU_SYS_SWRST;
    rand RGU_SRAM_SWRST_reg RGU_SRAM_SWRST;
    rand RGU_DDR_SWRST_reg RGU_DDR_SWRST;
    rand RGU_USB_SWRST_reg RGU_USB_SWRST;
    rand RGU_MMC_SWRST_reg RGU_MMC_SWRST;
    rand RGU_DMAC_SWRST_reg RGU_DMAC_SWRST;
    rand RGU_QSPI_SWRST_reg RGU_QSPI_SWRST;
    rand RGU_SPI_SWRST_reg RGU_SPI_SWRST;
    rand RGU_I2C_SWRST_reg RGU_I2C_SWRST;
    rand RGU_UART_SWRST_reg RGU_UART_SWRST;
    rand RGU_GPIO_SWRST_reg RGU_GPIO_SWRST;
    rand RGU_I2S_SWRST_reg RGU_I2S_SWRST;
    rand RGU_GPU_SWRST_reg RGU_GPU_SWRST;
    rand RGU_VIDEC_SWRST_reg RGU_VIDEC_SWRST;
    rand RGU_VICOD_SWRST_reg RGU_VICOD_SWRST;
    rand RGU_CAMERA_SWRST_reg RGU_CAMERA_SWRST;
    rand RGU_DISPLAY_SWRST_reg RGU_DISPLAY_SWRST;
    rand RGU_LLC_SWRST_reg RGU_LLC_SWRST;
    rand RGU_CPU_SWRST_reg RGU_CPU_SWRST;
    rand RGU_PWM_SWRST_reg RGU_PWM_SWRST;
    rand RGU_CPU_PWRUP_SWRST_reg RGU_CPU_PWRUP_SWRST;
    rand RGU_CPU_PWRUP_HEAVY_SWRST_reg RGU_CPU_PWRUP_HEAVY_SWRST;


    // Function: new
    // 
    function new (string name = "top_reg_block");
      super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function: build
    // 
    function void build;

      RGU_GLB = RGU_GLB_reg::type_id::create("RGU_GLB");
      RGU_GLB.build();
      RGU_GLB.configure(this);
      
      RGU_RST_STATUS = RGU_RST_STATUS_reg::type_id::create("RGU_RST_STATUS");
      RGU_RST_STATUS.build();
      RGU_RST_STATUS.configure(this);
      
      RGU_TIMER0 = RGU_TIMER0_reg::type_id::create("RGU_TIMER0");
      RGU_TIMER0.build();
      RGU_TIMER0.configure(this);
      
      RGU_TIMER1 = RGU_TIMER1_reg::type_id::create("RGU_TIMER1");
      RGU_TIMER1.build();
      RGU_TIMER1.configure(this);
      
      RGU_SB_SWRST = RGU_SB_SWRST_reg::type_id::create("RGU_SB_SWRST");
      RGU_SB_SWRST.build();
      RGU_SB_SWRST.configure(this);
      
      RGU_SYS_SWRST = RGU_SYS_SWRST_reg::type_id::create("RGU_SYS_SWRST");
      RGU_SYS_SWRST.build();
      RGU_SYS_SWRST.configure(this);
      
      RGU_SRAM_SWRST = RGU_SRAM_SWRST_reg::type_id::create("RGU_SRAM_SWRST");
      RGU_SRAM_SWRST.build();
      RGU_SRAM_SWRST.configure(this);
      
      RGU_DDR_SWRST = RGU_DDR_SWRST_reg::type_id::create("RGU_DDR_SWRST");
      RGU_DDR_SWRST.build();
      RGU_DDR_SWRST.configure(this);
      
      RGU_USB_SWRST = RGU_USB_SWRST_reg::type_id::create("RGU_USB_SWRST");
      RGU_USB_SWRST.build();
      RGU_USB_SWRST.configure(this);
      
      RGU_MMC_SWRST = RGU_MMC_SWRST_reg::type_id::create("RGU_MMC_SWRST");
      RGU_MMC_SWRST.build();
      RGU_MMC_SWRST.configure(this);
      
      RGU_DMAC_SWRST = RGU_DMAC_SWRST_reg::type_id::create("RGU_DMAC_SWRST");
      RGU_DMAC_SWRST.build();
      RGU_DMAC_SWRST.configure(this);
      
      RGU_QSPI_SWRST = RGU_QSPI_SWRST_reg::type_id::create("RGU_QSPI_SWRST");
      RGU_QSPI_SWRST.build();
      RGU_QSPI_SWRST.configure(this);
      
      RGU_SPI_SWRST = RGU_SPI_SWRST_reg::type_id::create("RGU_SPI_SWRST");
      RGU_SPI_SWRST.build();
      RGU_SPI_SWRST.configure(this);
      
      RGU_I2C_SWRST = RGU_I2C_SWRST_reg::type_id::create("RGU_I2C_SWRST");
      RGU_I2C_SWRST.build();
      RGU_I2C_SWRST.configure(this);
      
      RGU_UART_SWRST = RGU_UART_SWRST_reg::type_id::create("RGU_UART_SWRST");
      RGU_UART_SWRST.build();
      RGU_UART_SWRST.configure(this);
      
      RGU_GPIO_SWRST = RGU_GPIO_SWRST_reg::type_id::create("RGU_GPIO_SWRST");
      RGU_GPIO_SWRST.build();
      RGU_GPIO_SWRST.configure(this);
      
      RGU_I2S_SWRST = RGU_I2S_SWRST_reg::type_id::create("RGU_I2S_SWRST");
      RGU_I2S_SWRST.build();
      RGU_I2S_SWRST.configure(this);
      
      RGU_GPU_SWRST = RGU_GPU_SWRST_reg::type_id::create("RGU_GPU_SWRST");
      RGU_GPU_SWRST.build();
      RGU_GPU_SWRST.configure(this);
      
      RGU_VIDEC_SWRST = RGU_VIDEC_SWRST_reg::type_id::create("RGU_VIDEC_SWRST");
      RGU_VIDEC_SWRST.build();
      RGU_VIDEC_SWRST.configure(this);
      
      RGU_VICOD_SWRST = RGU_VICOD_SWRST_reg::type_id::create("RGU_VICOD_SWRST");
      RGU_VICOD_SWRST.build();
      RGU_VICOD_SWRST.configure(this);
      
      RGU_CAMERA_SWRST = RGU_CAMERA_SWRST_reg::type_id::create("RGU_CAMERA_SWRST");
      RGU_CAMERA_SWRST.build();
      RGU_CAMERA_SWRST.configure(this);
      
      RGU_DISPLAY_SWRST = RGU_DISPLAY_SWRST_reg::type_id::create("RGU_DISPLAY_SWRST");
      RGU_DISPLAY_SWRST.build();
      RGU_DISPLAY_SWRST.configure(this);
      
      RGU_LLC_SWRST = RGU_LLC_SWRST_reg::type_id::create("RGU_LLC_SWRST");
      RGU_LLC_SWRST.build();
      RGU_LLC_SWRST.configure(this);
      
      RGU_CPU_SWRST = RGU_CPU_SWRST_reg::type_id::create("RGU_CPU_SWRST");
      RGU_CPU_SWRST.build();
      RGU_CPU_SWRST.configure(this);
      
      RGU_PWM_SWRST = RGU_PWM_SWRST_reg::type_id::create("RGU_PWM_SWRST");
      RGU_PWM_SWRST.build();
      RGU_PWM_SWRST.configure(this);
      
      RGU_CPU_PWRUP_SWRST = RGU_CPU_PWRUP_SWRST_reg::type_id::create("RGU_CPU_PWRUP_SWRST");
      RGU_CPU_PWRUP_SWRST.build();
      RGU_CPU_PWRUP_SWRST.configure(this);
      
      RGU_CPU_PWRUP_HEAVY_SWRST = RGU_CPU_PWRUP_HEAVY_SWRST_reg::type_id::create("RGU_CPU_PWRUP_HEAVY_SWRST");
      RGU_CPU_PWRUP_HEAVY_SWRST.build();
      RGU_CPU_PWRUP_HEAVY_SWRST.configure(this);
      
      default_map = create_map("default_map", 0, 8, UVM_LITTLE_ENDIAN); // instance, base_addr, size in byte, endian
      default_map.add_reg(RGU_GLB, 'h0, "RW"); // instance, offset , access
      default_map.add_reg(RGU_RST_STATUS, 'h4, "RW"); // instance, offset , access
      default_map.add_reg(RGU_TIMER0, 'h8, "RW"); // instance, offset , access
      default_map.add_reg(RGU_TIMER1, 'hc, "RW"); // instance, offset , access
      default_map.add_reg(RGU_SB_SWRST, 'h10, "RW"); // instance, offset , access
      default_map.add_reg(RGU_SYS_SWRST, 'h14, "RW"); // instance, offset , access
      default_map.add_reg(RGU_SRAM_SWRST, 'h18, "RW"); // instance, offset , access
      default_map.add_reg(RGU_DDR_SWRST, 'h1c, "RW"); // instance, offset , access
      default_map.add_reg(RGU_USB_SWRST, 'h20, "RW"); // instance, offset , access
      default_map.add_reg(RGU_MMC_SWRST, 'h24, "RW"); // instance, offset , access
      default_map.add_reg(RGU_DMAC_SWRST, 'h28, "RW"); // instance, offset , access
      default_map.add_reg(RGU_QSPI_SWRST, 'h2c, "RW"); // instance, offset , access
      default_map.add_reg(RGU_SPI_SWRST, 'h30, "RW"); // instance, offset , access
      default_map.add_reg(RGU_I2C_SWRST, 'h34, "RW"); // instance, offset , access
      default_map.add_reg(RGU_UART_SWRST, 'h38, "RW"); // instance, offset , access
      default_map.add_reg(RGU_GPIO_SWRST, 'h3c, "RW"); // instance, offset , access
      default_map.add_reg(RGU_I2S_SWRST, 'h40, "RW"); // instance, offset , access
      default_map.add_reg(RGU_GPU_SWRST, 'h44, "RW"); // instance, offset , access
      default_map.add_reg(RGU_VIDEC_SWRST, 'h48, "RW"); // instance, offset , access
      default_map.add_reg(RGU_VICOD_SWRST, 'h4c, "RW"); // instance, offset , access
      default_map.add_reg(RGU_CAMERA_SWRST, 'h50, "RW"); // instance, offset , access
      default_map.add_reg(RGU_DISPLAY_SWRST, 'h54, "RW"); // instance, offset , access
      default_map.add_reg(RGU_LLC_SWRST, 'h58, "RW"); // instance, offset , access
      default_map.add_reg(RGU_CPU_SWRST, 'h5c, "RW"); // instance, offset , access
      default_map.add_reg(RGU_PWM_SWRST, 'h60, "RW"); // instance, offset , access
      default_map.add_reg(RGU_CPU_PWRUP_SWRST, 'h64, "RW"); // instance, offset , access
      default_map.add_reg(RGU_CPU_PWRUP_HEAVY_SWRST, 'h68, "RW"); // instance, offset , access

      lock_model();
          
    endfunction
  endclass: rgu_reg_block

endpackage: rgu_reg_pkg
